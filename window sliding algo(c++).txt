#include <iostream>
#include <deque>

void printKMax(int arr[], int n, int k) {
    std::deque<int> mydeque;

    // Initialize the deque with the indices of the first window of size 'k'
    for (int i = 0; i < k; i++) {
        while (!mydeque.empty() && arr[i] >= arr[mydeque.back()]) {
            mydeque.pop_back();
        }
        mydeque.push_back(i);
    }

    // Process the rest of the elements to find the maximums for each window
    for (int i = k; i < n; i++) {
        std::cout << arr[mydeque.front()] << " ";

        // Remove elements outside the current window from the front of the deque
        while (!mydeque.empty() && mydeque.front() <= i - k) {
            mydeque.pop_front();
        }

        // Remove smaller elements from the back of the deque
        while (!mydeque.empty() && arr[i] >= arr[mydeque.back()]) {
            mydeque.pop_back();
        }

        mydeque.push_back(i);
    }

    // Print the maximum of the last window
    std::cout << arr[mydeque.front()] << std::endl;
}

int main() {
    int t;
    std::cin >> t;
    while (t > 0) {
        int n, k;
        std::cin >> n >> k;
        int arr[n];
        for (int i = 0; i < n; i++) {
            std::cin >> arr[i];
        }
        printKMax(arr, n, k);
        t--;
    }
    return 0;
}
